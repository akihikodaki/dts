# Throughput numbers vary in different environment.
# Users could change these configuration on demand:
#
#  - test_parameters defines the combination of frame size and descriptor
# numbers, and the pattern is
#   {
#       'Numbers of Cores/Sockets/Queues #1': ['frame_size #1', 'frame_size #2',...],
#       'Numbers of Cores/Sockets/Queues #2': ['frame_size #1', 'frame_size #2',...],
#       ......
#   }
#
#  - test_duration is how many seconds each combination performance will
#  be recorded, default is 60s
#
#  - accepted_tolerance defines the accepted tolerance between test
# results and expected numbers, unit is percentage, (actual number - expected number)/expected number/100
#
#  - expected_throughput is a dictionary defining expected throughput
# numbers based on NIC, and the pattern is
#   {
#       'columbiaville_100g': 
#           {
#               'Numbers of Cores/Sockets/Queues #1':
#                   {
#                       'frame_size #1': 'expected number',
#                       'frame_size #2': 'expected number',
#                       ...
#                   },
#               'Numbers of Cores/Sockets/Queues #2':
#                   {
#                       'frame_size #1': 'expected number',
#                       'frame_size #2': 'expected number',
#                       ...
#                   },
#           }
#       ......
#   }
# Every user should fill it out with your actual numbers. To keep the
# expected throughput private, dts takes 0.00 as default.
#
#==========this feature supported is P4.======================
#  - if update_expected == Ture, and add argument "--update-expected" in
# bash command, all objects in this file will changed after the run
# for example: ./dts --update-expected
# Highlights:
# At the begining, please change test_parameters according to your
# requirements, then run ./dts --update-expected to get the absolute
# results which will replace the default numbers 0.00 in this configuration.
# So you will have your own private configuration, and could start your
# tests as ususal.

[suite]
update_expected = True

test_duration = 60
accepted_tolerance = 1
test_parameters = {
    '1C/1T-1Q': ['64', '128', '256', '512', '1024', '1280', '1518',],
    '1C/2T-2Q': ['64', '128', '256', '512', '1024', '1280', '1518',],
    '2C/2T-2Q': ['64', '128', '256', '512', '1024', '1280', '1518',],
    '2C/4T-4Q': ['64', '128', '256', '512', '1024', '1280', '1518',],
    '4C/4T-4Q': ['64', '128', '256', '512', '1024', '1280', '1518',],}
expected_throughput = {
    'test_perf_throughput_ipv6_lpm': {
        'niantic': {
            '1C/1T-1Q': {
                 '64': '0.00',
                 '128': '0.00',
                 '256': '0.00',
                 '512': '0.00',
                 '1024': '0.00',
                 '1280': '0.00',
                 '1518': '0.00', },
            '1C/2T-2Q': {
                 '64': '0.00',
                 '128': '0.00',
                 '256': '0.00',
                 '512': '0.00',
                 '1024': '0.00',
                 '1280': '0.00',
                 '1518': '0.00', },
            '2C/2T-2Q': {
                 '64': '0.00',
                 '128': '0.00',
                 '256': '0.00',
                 '512': '0.00',
                 '1024': '0.00',
                 '1280': '0.00',
                 '1518': '0.00', },
            '2C/4T-4Q': {
                 '64': '0.00',
                 '128': '0.00',
                 '256': '0.00',
                 '512': '0.00',
                 '1024': '0.00',
                 '1280': '0.00',
                 '1518': '0.00', },
            '4C/4T-4Q': {
                 '64': '0.00',
                 '128': '0.00',
                 '256': '0.00',
                 '512': '0.00',
                 '1024': '0.00',
                 '1280': '0.00',
                 '1518': '0.00', },},}, }